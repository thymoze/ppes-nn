#include <pico/multicore.h>
#include <pico/stdlib.h>

#define DEFAULT_TENSOR_BACKEND TensorBackend<T>(SimpleOps<T>())

#include <iostream>
#include <nn/all.hpp>
#include <string>

#include "../../trained_models/mnist.hpp"

Tensor<double> input = Tensor<double>::make(
    {1, 28 * 28},
    {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   38,  190, 25,  0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   13,  25,  10,  0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   112, 252, 125, 4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     132, 252, 113, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   61,  252, 252, 36,  0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   132, 252, 240, 79,  0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   84,  252, 252, 36,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   132,
     252, 252, 238, 52,  0,   0,   0,   0,   0,   0,   0,   0,   12,  198, 252, 252, 122, 0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   99,  252, 252, 252, 181, 17,  0,   0,   0,   0,   0,
     0,   0,   49,  252, 252, 252, 122, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   125,
     252, 252, 252, 100, 0,   0,   0,   0,   0,   0,   0,   26,  218, 252, 252, 36,  0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   15,  216, 252, 252, 207, 19,  0,   0,   0,   0,   0,
     0,   49,  252, 252, 252, 36,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   157,
     252, 252, 252, 48,  0,   0,   0,   6,   109, 109, 194, 252, 252, 252, 36,  0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   100, 252, 252, 252, 105, 0,   58,  116, 128, 252, 252,
     252, 252, 252, 212, 19,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   164,
     253, 253, 253, 253, 253, 253, 255, 253, 253, 253, 253, 253, 253, 99,  0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   49,  252, 252, 252, 252, 252, 252, 253, 252, 252, 252,
     252, 252, 252, 155, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   49,  252,
     252, 252, 252, 252, 252, 217, 216, 141, 126, 252, 252, 252, 155, 0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   49,  252, 252, 252, 234, 204, 89,  0,   0,   0,   49,  252,
     252, 252, 155, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   14,  158, 192,
     151, 45,  0,   0,   0,   0,   0,   49,  252, 252, 252, 225, 17,  0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   49,  252, 252,
     252, 252, 23,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   33,  228, 252, 252, 252, 157, 4,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   55,  229, 252,
     252, 252, 11,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   53,  232, 252, 252, 63,  0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   90,  206,
     131, 11,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0});

void core1() {
  const uint LED_PIN = PICO_DEFAULT_LED_PIN;
  gpio_init(LED_PIN);
  gpio_set_dir(LED_PIN, GPIO_OUT);
  while (true) {
    gpio_put(LED_PIN, 1);
    sleep_ms(250);
    gpio_put(LED_PIN, 0);
    sleep_ms(250);
  }
}

int main(void) {
  stdio_init_all();

  multicore_launch_core1(core1);

  auto model = nn::Sequential<double>();
  model.add(nn::Linear<double, 28 * 28, 50>());
  model.add(nn::Sigmoid<double>());
  model.add(nn::Linear<double, 50, 10>());
  model.init(mnist_model::mnist_model, mnist_model::mnist_model_len);
  for (auto& p : model.params()) {
    p.value().requires_grad(false);
  }

  std::cout << "Model initialized" << std::endl;
  sleep_ms(2000);
  while (1) {
    std::cout << "Running inference" << std::endl;
    auto out = model(input);
    auto output = argmax(out, 1);

    std::cout << "Output: " << output.item() << std::endl;
    sleep_ms(1000);
  }
}
